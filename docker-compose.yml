# ‚ö†Ô∏è QUAN TR·ªåNG: V·∫§N ƒê·ªÄ C·∫§P QUY·ªÄN TH∆Ø M·ª§C MOUNT
# 
# Khi s·ª≠ d·ª•ng bind mount volumes, c·∫ßn c·∫•p quy·ªÅn ch√≠nh x√°c ƒë·ªÉ tr√°nh l·ªói "Permission denied":
# 
# 1. TH∆Ø M·ª§C CHA: /root/n8n-selfhost ph·∫£i thu·ªôc v·ªÅ user 1000 (ubuntu)
#    sudo chown -R ubuntu:ubuntu /root/n8n-selfhost
# 
# 2. TH∆Ø M·ª§C MOUNT: ./n8n-data ph·∫£i c√≥ quy·ªÅn 755 v√† owner 1000:1000
#    sudo chown -R 1000:1000 n8n-data
#    chmod -R 755 n8n-data
# 
# 3. USER ID TRONG CONTAINER: Ph·∫£i kh·ªõp v·ªõi owner c·ªßa th∆∞ m·ª•c mount
#    - N8N ch·∫°y v·ªõi user 1000:1000
#    - PostgreSQL ch·∫°y v·ªõi user 999:999 (postgres)
#    - Redis ch·∫°y v·ªõi user 999:999 (redis)
# 
# 4. L·ªÜNH C·∫§P QUY·ªÄN HO√ÄN CH·ªàNH:
#    cd /root/n8n-selfhosted-docker
#    sudo chown -R ubuntu:ubuntu .
#    sudo chown -R 1000:1000 n8n-data
#    chmod -R 755 n8n-data
#
# ‚ö†Ô∏è KH√îNG BAO GI·ªú mount th∆∞ m·ª•c root (/) v√†o container v√¨ l√Ω do b·∫£o m·∫≠t!
services:
  n8n:
    image: n8nio/n8n:1.107.4
    container_name: n8n
    restart: unless-stopped
    user: "1000:1000"  # ƒê·∫£m b·∫£o container ch·∫°y v·ªõi user node
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    environment:
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_EDITOR_BASE_URL=${N8N_HOST}     # gi·ªØ host anh ƒëang d√πng, ch·ªâ th√™m scheme
      - WEBHOOK_URL=${N8N_HOST}
      - N8N_WEBHOOK_URL=${N8N_HOST}
      - GENERIC_TIMEZONE=Asia/Ho_Chi_Minh
      - N8N_LOG_LEVEL=info
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_METRICS_ENABLED=false
      - N8N_USER_MANAGEMENT_DISABLED=false
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=AdminSecurePass2024
      - N8N_ENCRYPTION_KEY=581640c3852826913a434892d82834fd9fa80f940ac07691bd5908624902708c

      # Database (gi·ªØ nguy√™n hardcode)
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=PostgresSecurePass2024

      # Redis (gi·ªØ nguy√™n hardcode c≈©)
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=RedisSecurePass2024

      # Queue mode (B·ªî SUNG ƒë√∫ng bi·∫øn Bull)
      - EXECUTIONS_MODE=queue
      - N8N_RUNNERS_ENABLED=false
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=false
      - QUEUE_BULL_PREFIX=n8n
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=RedisSecurePass2024
      - QUEUE_BULL_REDIS_DB=0  # B·ªî SUNG: Ch·ªâ ƒë·ªãnh database Redis
      - EXECUTIONS_TIMEOUT=3600
      - EXECUTIONS_TIMEOUT_MAX=7200

      # B·∫≠t health endpoints cho readiness
      - QUEUE_HEALTH_CHECK_ACTIVE=true

      - N8N_DISABLE_PRODUCTION_MAIN_PROCESS=false
      - N8N_DISABLE_UI=false
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true

    volumes:
      - n8n-data:/home/node/.n8n:rw  # Named volume: Tr√°nh v·∫•n ƒë·ªÅ permission
      - ./workflows:/home/node/.n8n/workflows:ro
      # üîí ƒê√É LO·∫†I B·ªé: Docker socket mount v√¨ kh√¥ng c·∫ßn thi·∫øt v√† g√¢y r·ªßi ro b·∫£o m·∫≠t

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    networks:
      - n8n-network

    healthcheck:
      # d√πng Node http client, kh√¥ng c·∫ßn c√†i curl
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:5678/healthz/readiness',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""]
      interval: 30s
      timeout: 5s
      retries: 10

    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1

  n8n-worker:
    image: n8nio/n8n:1.107.4
    restart: unless-stopped
    user: "1000:1000"  # ƒê·∫£m b·∫£o container ch·∫°y v·ªõi user node
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    entrypoint: ["node", "/usr/local/bin/n8n"]
    command: ["worker"]
    environment:
      - N8N_PORT=5678
      - GENERIC_TIMEZONE=Asia/Ho_Chi_Minh
      - N8N_LOG_LEVEL=info
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_METRICS_ENABLED=false

      # Queue worker - C·∫§U H√åNH QUAN TR·ªåNG
      - EXECUTIONS_MODE=queue
      - N8N_DISABLE_UI=true
      - N8N_DISABLE_PRODUCTION_MAIN_PROCESS=true
      - N8N_WORKER_MODE=true
      - N8N_RUNNERS_ENABLED=true  # B·ªî SUNG: B·∫≠t task runners
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true  # B·ªî SUNG: Offload manual executions

      # ƒê·ªíNG B·ªò ENCRYPTION KEY (B·ªî SUNG)
      - N8N_ENCRYPTION_KEY=581640c3852826913a434892d82834fd9fa80f940ac07691bd5908624902708c

      # Database (gi·ªØ nguy√™n hardcode)
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=PostgresSecurePass2024

      # Redis (Bull) ‚Äî C·∫§U H√åNH QUEUE ƒê·∫¶Y ƒê·ª¶
      - QUEUE_BULL_PREFIX=n8n
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=RedisSecurePass2024
      - QUEUE_BULL_REDIS_DB=0  # B·ªî SUNG: Ch·ªâ ƒë·ªãnh database Redis

      # Health endpoints
      - QUEUE_HEALTH_CHECK_ACTIVE=true

      - EXECUTIONS_TIMEOUT=3600
      - EXECUTIONS_TIMEOUT_MAX=7200

    volumes:
      - n8n-data:/home/node/.n8n:rw  # Named volume: Tr√°nh v·∫•n ƒë·ªÅ permission

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    networks:
      - n8n-network

    healthcheck:
      # Worker kh√¥ng c√≥ HTTP endpoint, ki·ªÉm tra process thay v√¨ HTTP
      test: ["CMD-SHELL", "ps aux | grep 'n8n worker' | grep -v grep || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 10

  cloudflared:
    build:
      context: .
      dockerfile: Dockerfile.cloudflared
    container_name: n8n-cloudflared
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    environment:
      - CLOUDFLARE_TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - n8n-network
    depends_on:
      - n8n

  redis:
    image: redis:7-alpine
    container_name: n8n-redis
    restart: unless-stopped
    command: redis-server --requirepass RedisSecurePass2024 --maxmemory 512mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    environment:
      - REDIS_PASSWORD=RedisSecurePass2024
    volumes:
      - redis-data:/data  # Named volume: Tr√°nh v·∫•n ƒë·ªÅ permission
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "RedisSecurePass2024", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  postgres:
    image: pgvector/pgvector:pg15
    container_name: n8n-postgres
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD=PostgresSecurePass2024
      - POSTGRES_INITDB_ARGS=--locale=C.UTF-8
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=vector
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
      - POSTGRES_MAINTENANCE_WORK_MEM=64MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=16MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
      - POSTGRES_RANDOM_PAGE_COST=1.1
      - POSTGRES_EFFECTIVE_IO_CONCURRENCY=200
      - POSTGRES_WORK_MEM=8MB
      - POSTGRES_MIN_WAL_SIZE=1GB
      - POSTGRES_MAX_WAL_SIZE=4GB
      - POSTGRES_MAX_WORKER_PROCESSES=8
      - POSTGRES_MAX_PARALLEL_WORKERS_PER_GATHER=4
      - POSTGRES_MAX_PARALLEL_WORKERS=8
      - POSTGRES_MAX_PARALLEL_MAINTENANCE_WORKERS=4
    volumes:
      - postgres-data:/var/lib/postgresql/data  # Named volume ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ permission
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n -d n8n"]
      interval: 10s
      timeout: 5s
      retries: 10

# Volumes section
volumes:
  n8n-data:  # Named volume cho N8N ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ permission
  redis-data:  # Named volume cho Redis ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ permission
  postgres-data:  # Named volume cho PostgreSQL ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ permission

networks:
  n8n-network:
    driver: bridge
    # L∆∞u √Ω: n·∫øu tr∆∞·ªõc ƒë√¢y anh ƒë·ªÉ internal: true, h√£y b·ªè ƒë·ªÉ cloudflared/n8n ra Internet.
