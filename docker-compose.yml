# ‚ö†Ô∏è QUAN TR·ªåNG: V·∫§N ƒê·ªÄ C·∫§P QUY·ªÄN TH∆Ø M·ª§C MOUNT
# 
# Khi s·ª≠ d·ª•ng bind mount volumes, c·∫ßn c·∫•p quy·ªÅn ch√≠nh x√°c ƒë·ªÉ tr√°nh l·ªói "Permission denied":
# 
# 1. TH∆Ø M·ª§C CHA: /root/n8n-selfhost ph·∫£i thu·ªôc v·ªÅ user 1000 (ubuntu)
#    sudo chown -R ubuntu:ubuntu /root/n8n-selfhost
# 
# 2. TH∆Ø M·ª§C MOUNT: ./n8n-data ph·∫£i c√≥ quy·ªÅn 755 v√† owner 1000:1000
#    sudo chown -R 1000:1000 n8n-data
#    chmod -R 755 n8n-data
# 
# 3. USER ID TRONG CONTAINER: Ph·∫£i kh·ªõp v·ªõi owner c·ªßa th∆∞ m·ª•c mount
#    - N8N ch·∫°y v·ªõi user 1000:1000
#    - PostgreSQL ch·∫°y v·ªõi user 999:999 (postgres)
#    - Redis ch·∫°y v·ªõi user 999:999 (redis)
# 
# 4. L·ªÜNH C·∫§P QUY·ªÄN HO√ÄN CH·ªàNH:
#    cd /root/n8n-selfhost
#    sudo chown -R ubuntu:ubuntu .
#    sudo chown -R 1000:1000 n8n-data
#    chmod -R 755 n8n-data
#
# ‚ö†Ô∏è KH√îNG BAO GI·ªú mount th∆∞ m·ª•c root (/) v√†o container v√¨ l√Ω do b·∫£o m·∫≠t!

services:
  n8n:
    image: n8nio/n8n:1.107.4   # pin version ·ªïn ƒë·ªãnh thay v√¨ :latest
    container_name: n8n
    restart: unless-stopped
    # ports:
      # - "5678:5678"   # Kh√¥ng c·∫ßn expose port v√¨ ƒë√£ d√πng Cloudflare tunnel
    
    # Resource limits cho production
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    
    environment:
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_EDITOR_BASE_URL=${N8N_HOST}
      - WEBHOOK_URL=${N8N_HOST}
      - N8N_WEBHOOK_URL=${N8N_HOST}
      - GENERIC_TIMEZONE=Asia/Ho_Chi_Minh
      - N8N_LOG_LEVEL=info
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_METRICS_ENABLED=false

      # B·∫≠t x√°c th·ª±c
      - N8N_USER_MANAGEMENT_DISABLED=false
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=AdminSecurePass2024
      - N8N_ENCRYPTION_KEY=581640c3852826913a434892d82834fd9fa80f940ac07691bd5908624902708c

      # PostgreSQL Database Configuration
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=PostgresSecurePass2024

      # Redis Configuration (Queue System cho production)
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=RedisSecurePass2024

      # Main Process Configuration (Web UI + API)
      - EXECUTIONS_MODE=main
      - N8N_RUNNERS_ENABLED=true
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
      - QUEUE_BULL_PREFIX=n8n
      
      # C·∫•u h√¨nh execution cho main process
      - EXECUTIONS_TIMEOUT=3600
      - EXECUTIONS_TIMEOUT_MAX=7200
      - EXECUTIONS_PROCESS=main

      # C·∫•u h√¨nh DNS v√† network ƒë·ªÉ tr√°nh l·ªói DNS
      - N8N_DISABLE_PRODUCTION_MAIN_PROCESS=false
      - N8N_DISABLE_UI=false
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true

    volumes:
      # Named volume cho production (shared gi·ªØa main v√† worker)
      - n8n_data:/home/node/.n8n
      
      # üîß DOCKER SOCKET: Ch·ªâ mount khi c·∫ßn thi·∫øt ƒë·ªÉ ch·∫°y Docker t·ª´ n8n
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:5678/healthz').then(r=>{if(r.ok)process.exit(0);process.exit(1)}).catch(()=>process.exit(1))"]
      interval: 30s
      timeout: 5s
      retries: 5
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1

  # N8N Worker Service - X·ª≠ l√Ω workflow execution
  n8n-worker:
    image: n8nio/n8n:1.107.4
    container_name: n8n-worker
    restart: unless-stopped
    
    # Resource limits cho worker
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    environment:
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - GENERIC_TIMEZONE=Asia/Ho_Chi_Minh
      - N8N_LOG_LEVEL=info
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_METRICS_ENABLED=false

      # B·∫≠t x√°c th·ª±c (worker c·∫ßn access database)
      - N8N_USER_MANAGEMENT_DISABLED=false
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=AdminSecurePass2024
      - N8N_ENCRYPTION_KEY=581640c3852826913a434892d82834fd9fa80f940ac07691bd5908624902708c

      # PostgreSQL Database Configuration
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=PostgresSecurePass2024

      # Redis Configuration (Queue System)
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=RedisSecurePass2024

      # Worker Process Configuration
      - EXECUTIONS_MODE=worker
      - N8N_RUNNERS_ENABLED=true
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=false
      - QUEUE_BULL_PREFIX=n8n
      
      # C·∫•u h√¨nh execution cho worker
      - EXECUTIONS_TIMEOUT=3600
      - EXECUTIONS_TIMEOUT_MAX=7200
      - EXECUTIONS_PROCESS=worker

      # Worker specific settings
      - N8N_DISABLE_UI=true
      - N8N_DISABLE_PRODUCTION_MAIN_PROCESS=true

    volumes:
      # Named volume cho production (shared v·ªõi main process)
      - n8n_data:/home/node/.n8n:ro
      
      # üîß DOCKER SOCKET: Worker c·∫ßn ƒë·ªÉ ch·∫°y Docker nodes
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 5s
      retries: 5
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1

  # Cloudflare Tunnel Service
  cloudflared:
    build:
      context: .
      dockerfile: Dockerfile.cloudflared
    container_name: n8n-cloudflared
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    environment:
      - CLOUDFLARE_TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - n8n-network
    depends_on:
      - n8n

  # Redis Service cho Queue System
  redis:
    image: redis:7-alpine
    container_name: n8n-redis
    restart: unless-stopped
    command: redis-server --requirepass RedisSecurePass2024 --maxmemory 512mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    environment:
      - REDIS_PASSWORD=RedisSecurePass2024
    volumes:
      - redis_data:/data
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  postgres:
    image: pgvector/pgvector:pg15
    container_name: n8n-postgres
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD=PostgresSecurePass2024
      - POSTGRES_INITDB_ARGS=--locale=C.UTF-8
      # T·ªëi ∆∞u PostgreSQL cho production
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=vector
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
      - POSTGRES_MAINTENANCE_WORK_MEM=64MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=16MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
      - POSTGRES_RANDOM_PAGE_COST=1.1
      - POSTGRES_EFFECTIVE_IO_CONCURRENCY=200
      - POSTGRES_WORK_MEM=4MB
      - POSTGRES_MIN_WAL_SIZE=1GB
      - POSTGRES_MAX_WAL_SIZE=4GB
      - POSTGRES_MAX_WORKER_PROCESSES=8
      - POSTGRES_MAX_PARALLEL_WORKERS_PER_GATHER=4
      - POSTGRES_MAX_PARALLEL_WORKERS=8
      - POSTGRES_MAX_PARALLEL_MAINTENANCE_WORKERS=4
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n -d n8n"]
      interval: 10s
      timeout: 5s
      retries: 10

# üìÅ VOLUMES: Qu·∫£n l√Ω d·ªØ li·ªáu persistent
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  n8n_data:
    driver: local

# üåê NETWORKS: K·∫øt n·ªëi gi·ªØa c√°c containers
networks:
  n8n-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
